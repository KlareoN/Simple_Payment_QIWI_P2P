from dispatcher import dispatcher, database_payment, qiwi_p2p, keyboard_core_init, types, __AMOUNT

from datetime import datetime, timedelta


@dispatcher.message_handler(commands=['start'])
async def on_start(
    message: types.Message,
    chat_type = types.ChatType.PRIVATE
):
    user_id_ = message.from_user.id

    if not database_payment().exists_payment(
        user_id = user_id_
    ):
        comment_ = str(hash(f'{datetime.now()}_{user_id_}'))

        expiration_datetime_ = timedelta(
            minutes = 60
        ) # —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–ª–∞—Ç—ë–∂

        bill = qiwi_p2p.create_bill(
            bill_id = str(datetime.now()),
            amount = __AMOUNT,
            comment = comment_,
            expiration_datetime = expiration_datetime_
        )

        database_payment().create_payment(
            user_id = user_id_,
            bill_id = str(bill['bill_id']),
            amount = __AMOUNT,
            comment = comment_,
            url = bill['pay_url']
        )

    await message.answer(
        text = 'üëã'
    )
    return await message.answer(
        text = '<b>–ü—Ä–∏–≤–µ—Ç</b>, —è –≤—ã—Å—Ç–∞–≤–∏–ª —Ç–µ–±–µ —Å—á—ë—Ç —á–µ—Ä–µ–∑ P2P!\n\n'
               f'<b>–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{__AMOUNT}‚ÇΩ</code>\n'
               f'<i>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞—Ç–µ–∂–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!</i>',

        reply_markup = await keyboard_core_init.start(
            pay_url = database_payment().get_information_payment(
                user_id = user_id_
            )[3]
        )
    )

